{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","Api/Api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setIsShowPostDetails","isShowPostDetails","selectedPostId","setSelectPostId","className","map","post","id","title","buttonText","type","classNames","onClick","handleShowDetails","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","useState","name","setName","email","setEmail","text","setText","isLoading","setIsLoading","isErrorName","setIsErrorName","isErrorEmail","setIsErrorEmail","isErrorText","setIsErrorText","addNewComment","a","trim","newComment","postId","addedComment","currentComments","console","error","onSubmit","event","preventDefault","length","htmlFor","placeholder","value","onChange","newValue","target","PostDetails","isError","setIsError","setPosts","comments","isOpen","setIsOpen","thisPost","handleGetComments","commentsArr","deleteSelectComment","deleteComment","prevComments","filter","comment","useEffect","catch","href","UserSelector","users","selectUser","selectedUserId","setSelectedUserId","role","user","App","setUsers","selectPostId","getUsersFromServer","find","person","getPostsFromSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a1b7b54.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  isShowPostDetails: boolean;\n  setIsShowPostDetails: (a: boolean) => void;\n  selectedPostId: number | undefined;\n  setSelectPostId: (n: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setIsShowPostDetails,\n  isShowPostDetails,\n  selectedPostId,\n  setSelectPostId,\n}) => {\n  const handleShowDetails = (id: number) => {\n    if (selectedPostId === id) {\n      setIsShowPostDetails(!isShowPostDetails);\n    } else {\n      setIsShowPostDetails(true);\n    }\n\n    setSelectPostId(id);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            const buttonText = ((selectedPostId === id)\n              && isShowPostDetails)\n              ? 'Close'\n              : 'Open';\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button',\n                      'is-link',\n                      {\n                        'is-light': !((selectedPostId === id)\n                          && isShowPostDetails),\n                      },\n                    )}\n                    onClick={() => handleShowDetails(id)}\n                  >\n                    {buttonText}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data?: T, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: T) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: T) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment } from '../Api/Api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPostId: number | undefined\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  setComments,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [text, setText] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [isErrorName, setIsErrorName] = useState<boolean>(false);\n  const [isErrorEmail, setIsErrorEmail] = useState<boolean>(false);\n  const [isErrorText, setIsErrorText] = useState<boolean>(false);\n\n  const handleChangeName = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    event.preventDefault();\n    setIsErrorName(false);\n    const newValue: string = event.target.value;\n\n    setName(newValue);\n  };\n\n  const handleChangeEmail = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    event.preventDefault();\n    setIsErrorEmail(false);\n    const newValue: string = event.target.value;\n\n    setEmail(newValue);\n  };\n\n  const handleChangeText = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    event.preventDefault();\n    setIsErrorText(false);\n    const newValue: string = event.target.value;\n\n    setText(newValue);\n  };\n\n  const addNewComment = async () => {\n    if (!name.trim() || !email.trim() || !text.trim()) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const id = selectedPostId as number;\n\n    const newComment = {\n      name,\n      email,\n      body: text,\n      postId: id,\n    };\n\n    try {\n      if (selectedPostId) {\n        const addedComment = await addComment(selectedPostId, newComment);\n\n        setComments(\n          (currentComments: Comment[]) => [...currentComments, addedComment],\n        );\n        setText('');\n        setIsLoading(false);\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error adding comment:', error);\n    }\n  };\n\n  const errorInput = () => {\n    if (name.trim().length === 0) {\n      setIsErrorName(true);\n    }\n\n    if (email.trim().length === 0) {\n      setIsErrorEmail(true);\n    }\n\n    if (text.trim().length === 0) {\n      setIsErrorText(true);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    errorInput();\n    addNewComment();\n  };\n\n  const clearAllInput = () => {\n    setText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isErrorName },\n            )}\n            value={name}\n            onChange={handleChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorName\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {isErrorName\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={email}\n            onChange={handleChangeEmail}\n            className={classNames(\n              'input',\n              { 'is-danger': isErrorEmail },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmail\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n        {isErrorEmail\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Email is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isErrorText },\n            )}\n            value={text}\n            onChange={handleChangeText}\n          />\n        </div>\n        {isErrorText\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              {\n                'is-loading': isLoading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearAllInput}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get('/users');\n};\n\nexport const getPosts = (id?: number) => {\n  return client.get(`/posts?userId=${id}`);\n};\n\nexport const getPost = (id?: number) => {\n  return client.get(`/posts/${id}`);\n};\n\nexport const getComments = (id?: number) => {\n  return client.get(`/comments?postId=${id}`);\n};\n\nexport const postData = (url: string, data: Post) => {\n  return client.post(url, data);\n};\n\nexport const updateComments = (data: Comment[]) => {\n  return client.patch('/comments', data);\n};\n\nexport const deleteData = (url: string) => {\n  return client.delete(url);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (postId: number, data: Comment) => {\n  return client.post(`/comments?postId=${postId}`, data);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { getComments, getPost, deleteComment } from '../Api/Api';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPostId: number | undefined\n  isError: boolean\n  setIsError: (a: boolean) => void\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n  isError,\n  setIsError,\n}) => {\n  const [post, setPosts] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const thisPost = post as Post;\n\n  const handleGetComments = () => {\n    setIsLoading(true);\n    getComments(selectedPostId)\n      .then(data => {\n        const commentsArr = data as Comment[];\n\n        setIsLoading(false);\n        setComments(commentsArr);\n      });\n  };\n\n  const deleteSelectComment = (id: number | undefined) => {\n    if (id) {\n      deleteComment(id);\n      setComments((prevComments: Comment[]) => prevComments.filter(\n        comment => comment.id !== id,\n      ));\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectedPostId) {\n      getPost(selectedPostId)\n        .then(data => {\n          const postData = data as Post;\n\n          setPosts(postData);\n          setIsLoading(false);\n        })\n        .catch(error => {\n          // eslint-disable-next-line no-console\n          console.error('Error fetching post:', error);\n\n          setIsError(true);\n          setIsLoading(false);\n        });\n\n      handleGetComments();\n    }\n  }, [selectedPostId, setComments]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        {thisPost ? (\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${selectedPostId}: ${thisPost.title}`}\n            </h2>\n            <p data-cy=\"PostBody\">{thisPost.body}</p>\n          </div>\n        ) : null}\n\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            {isError && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )}\n            {comments.length === 0 ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n                {comments.map(comment => {\n                  const {\n                    email,\n                    name,\n                    body,\n                    id,\n                  } = comment;\n\n                  return (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                          {name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => deleteSelectComment(id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {body}\n                      </div>\n                    </article>\n                  );\n                })}\n              </>\n            )}\n          </>\n        )}\n\n        {!isLoading && !isOpen ? (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsOpen(true)}\n          >\n            Write a comment\n          </button>\n        ) : null}\n\n        {isOpen && (\n          <NewCommentForm\n            setComments={setComments}\n            selectedPostId={selectedPostId}\n            key={selectedPostId}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[]\n  selectUser: User | undefined\n  selectedUserId: number | undefined\n  setSelectedUserId: (a: number) => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectUser,\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  let text = '';\n  const myUser = selectUser as User;\n\n  if (myUser) {\n    text = myUser.name;\n  } else {\n    text = 'Choose a user';\n  }\n\n  const handleChangeUser = (id: number) => {\n    setSelectedUserId(id);\n    setIsOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          <span>{text}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => {\n              return (\n                <a\n                  onClick={() => handleChangeUser(user.id)}\n                  href={`#user-${user.id}`}\n                  className={classNames('dropdown-item',\n                    { 'is-active': user.id === selectedUserId })}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { getPosts, getUsers } from './Api/Api';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isShowPostDetails, setIsShowPostDetails] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  const [users, setUsers] = useState<User[]>([]);\n\n  const [selectedUserId, setSelectedUserId] = useState<number>();\n  const [selectPostId, setSelectPostId] = useState<number>();\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const getUsersFromServer = () => {\n    getUsers()\n      .then(data => {\n        const user = data as User[];\n\n        setUsers(user);\n      })\n      .catch(() => {\n        setIsError(true);\n      });\n  };\n\n  const selectUser = users.find(person => person.id === selectedUserId);\n\n  const getPostsFromSelectedUser = () => {\n    setIsLoading(true);\n    if (selectUser) {\n      getPosts(selectedUserId)\n        .then(data => {\n          const selectedPosts = data as Post[];\n\n          setPosts(selectedPosts);\n          setIsLoading(false);\n        })\n        .catch(error => {\n          // eslint-disable-next-line no-console\n          console.error('Error:', error);\n          setIsError(true);\n          setIsLoading(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      getPostsFromSelectedUser();\n    }\n  }, [selectUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectUser={selectUser}\n                  selectedUserId={selectedUserId}\n                  setSelectedUserId={setSelectedUserId}\n                  users={users}\n                />\n              </div>\n\n              <div className=\"block \" data-cy=\"MainContent\">\n                {isError && (\n                  <>\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  </>\n                )}\n\n                {isLoading && <Loader />}\n\n                {!selectedUserId && !isLoading\n                  ? (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                  : (posts.length > 0\n                    && (\n                      <PostsList\n                        posts={posts}\n                        isShowPostDetails={isShowPostDetails}\n                        setIsShowPostDetails={setIsShowPostDetails}\n                        selectedPostId={selectPostId}\n                        setSelectPostId={setSelectPostId}\n                      />\n                    )\n                  )}\n                {(selectedUserId && posts.length === 0 && !isLoading)\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n              </div>\n\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isShowPostDetails },\n            )}\n          >\n            {isShowPostDetails && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  isError={isError}\n                  setIsError={setIsError}\n                  selectedPostId={selectPostId}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}